{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SACMC,EAAO,CACXC,MAAOC,SAASC,cAAc,uBAC9BC,KAAMF,SAASC,cAAc,sBAC7BE,OAAQH,SAASC,cAAc,wBAC/BG,KAAMJ,SAASC,cAAc,UAiC/B,SAASI,EAAcC,EAAUP,GAE/B,OAAO,IAAIQ,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCN,GAAY,EACZO,YAAW,WACLH,EACFF,EAAQ,GAAkBM,OAAfR,EAAS,QAAYQ,OAANf,EAAM,OAEhCU,EAAO,GAAkBK,OAAfR,EAAS,QAAYQ,OAANf,EAAM,SAEjCA,MAzCND,EAAKM,KAAKW,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBAON,IALA,IAAMC,EAAapB,EAAKC,MAAMoB,MACxBjB,EAAOJ,EAAKI,KAAKiB,MACjBhB,EAASL,EAAKK,OAAOgB,MAGlBC,EAAI,EAAGA,EAAIjB,EAAQiB,IAAK,CAC/B,IAAIC,EAAWD,EACfE,QAAQC,IAAIH,GACZ,IAAIrB,EAAQyB,OAAON,GAAeE,EAAIlB,EACtCoB,QAAQC,IAAI,QAASxB,GAGLM,EAAcgB,EAAUtB,GAE9B0B,MAAK,SAAEnB,EAAUP,GACvB2B,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAkCd,OAATR,OAEhDuB,OAAM,SAAEvB,EAAUP,GACnB2B,EAAA9B,GAAS+B,OAAOG,QAAQ,sBAA+BhB,OAATR,OAIpDU,EAAMe,OAAOC,W","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\nconst refs = {\n  delay: document.querySelector('input[name=\"delay\"]'),\n  step: document.querySelector('input[name=\"step\"]'),\n  amount: document.querySelector('input[name=\"amount\"]'),\n  form: document.querySelector('.form')\n}\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  const delayFirst = refs.delay.value;\n  const step = refs.step.value;\n  const amount = refs.amount.value;\n  // console.log(delayFirst, step, amount);\n\n  for (let i = 0; i < amount; i++) {\n    let position = i;\n    console.log(i);\n    let delay = Number(delayFirst) + (i * step);\n    console.log(\"delay\", delay);\n\n\n    const promise = createPromise(position, delay);\n      // position += 1;\n      promise.then(( position, delay ) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position}`);\n        \n      }).catch(( position, delay ) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position}`);\n        \n    })\n  }\n  event.target.reset();\n}\n\nfunction createPromise(position, delay) {\n  \n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    position += 1;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`${position} in ${delay}ms`);\n    } else {\n        reject(`${position} in ${delay}ms`);\n    }\n    },delay)\n  })\n}"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","delay","document","querySelector","step","amount","form","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","concat","addEventListener","event","preventDefault","delayFirst","value","i","position1","console","log","Number","then","$parcel$interopDefault","Notify","success","catch","failure","target","reset"],"version":3,"file":"03-promises.f08369ce.js.map"}